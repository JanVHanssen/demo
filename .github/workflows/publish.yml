name: Publish Backend & Deploy Frontend

on:
  push:
    branches: [main]

env:
  PROJECT_DIR: backend
  GROUP_ID: be.ucll.se
  ARTIFACT_ID: demo
  VERSION: 0.0.1-SNAPSHOT
  OWNER: JanVHanssen
  REPO: SoftwareEngineering
  AZURE_WEBAPP_NAME: jvhbackend

jobs:
  publish-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "maven"

      - name: Configure Maven
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>github</id>
                <username>${{ env.OWNER }}</username>
                <password>${{ secrets.PAT_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Build and Publish to GitHub Packages
        working-directory: ${{ env.PROJECT_DIR }}
        run: mvn -B clean deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

  deploy-frontend:
    needs: publish-backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        working-directory: frontend # Voeg working-directory toe
        run: |
          npm install -g vercel@latest
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}

  deploy-backend-to-azure:
    needs: publish-backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Configure Maven
        working-directory: ${{ env.PROJECT_DIR }} # Voeg working-directory toe
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>github</id>
                <username>${{ env.OWNER }}</username>
                <password>${{ secrets.PAT_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Download JAR from GitHub Packages
        working-directory: ${{ env.PROJECT_DIR }} # Voeg working-directory toe
        run: |
          # Eerst lokaal bouwen als fallback
          mvn -B clean package -DskipTests
          cp target/*.jar ../app.jar || echo "Local build failed, trying GitHub Packages..."

          # Probeer van GitHub Packages te downloaden
          if [ ! -f "../app.jar" ]; then
            mvn dependency:get \
              -DremoteRepositories=github::::https://maven.pkg.github.com/${{ env.OWNER }}/${{ env.REPO }} \
              -Dartifact=${{ env.GROUP_ID }}:${{ env.ARTIFACT_ID }}:${{ env.VERSION }}
            
            GROUP_PATH=$(echo ${{ env.GROUP_ID }} | tr '.' '/')
            JAR_FILE=~/.m2/repository/$GROUP_PATH/${{ env.ARTIFACT_ID }}/${{ env.VERSION }}/${{ env.ARTIFACT_ID }}-${{ env.VERSION }}.jar
            cp "$JAR_FILE" ../app.jar
          fi

          echo "JAR file ready:"
          ls -l ../app.jar

      - name: Deploy to Azure Web App
        run: |
          echo "Deploying JAR file:"
          ls -l app.jar
          cp app.jar ${{ env.PROJECT_DIR }}/app.jar || true
        working-directory: ${{ env.PROJECT_DIR }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_D426C91C358F4B92BB9128D01E5D9E2E }}
          package: ${{ env.PROJECT_DIR }}/app.jar
